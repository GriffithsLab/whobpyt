import numpy as np
import sciunit
from sciunit import Test, Model, TestSuite
from sciunit.scores import BooleanScore

class SciUnitWrapper(Model):
    def __init__(self, original_model):
        """
        Initialize the wrapper with the original model object.
        
        Parameters:
        - original_model: The original model that you want to test.
        """
        self.original_model = original_model

    def __getattr__(self, attr):
        # Forward attribute access to the original model
        return getattr(self.original_model, attr)


class SingleParameterTest(Test):
    def __init__(self, param_name, observation=None, name=None):
        """
        Initialize the test instance.
        
        Parameters:
        - param_name: Name of the parameter you want to test.
        - observation: (Optional) Any observational data or metrics you want to test against.
        - name: (Optional) A name for the test.
        """
        super(SingleParameterTest, self).__init__({}, name)  # Pass an empty dictionary
        self.param_name = param_name

    def validate_observation(self, observation):
        return {}  # Bypass the observation validation check (since we don't have one)

    def generate_prediction(self, model_instance):
        """
        Compute the score for the test.
        
        Parameters:
        - observation: The observation data or metric to compare against.
        - prediction: The predictions generated by the model.
        
        Returns:
        - A BooleanScore indicating pass/fail.
        """
        param_intent = model_instance.model.params.__dict__.get(self.param_name).fit_par
        fit_stats = model_instance.trainingStats.fit_params.get(self.param_name)
        return {'param_intent': param_intent, 'fit_stats': fit_stats}

    def compute_score(self, observation, prediction):
        """
        Compute the score for the test.
        
        Parameters:
        - observation: The observation data or metric to compare against.
        - prediction: The predictions generated by the model.
        
        Returns:
        - A BooleanScore indicating pass/fail.
        """
        param_intent = prediction['param_intent']
        fit_stats = prediction['fit_stats']
        success = True
        
        if fit_stats is not None:
            if param_intent != True:
                success = False
            abs_change = np.abs(np.diff(np.array(fit_stats))).sum()
            if abs_change == 0:
                success = False
        else:
            if param_intent != False:
                success = False
                
        return BooleanScore(success)  


def check_fit_integrity(F):
    '''
    Checks if the model parameters have been fitted correctly.
    '''
    param_names = list(F.model.params.__dict__.keys())
    tests = [SingleParameterTest(param_name, name=param_name) for param_name in param_names]
    suite = TestSuite(tests)
    sciunit_model = SciUnitWrapper(F)
    sciunit_model.name = str(F.model.type.__self__)
    score_matrix = suite.judge([sciunit_model])
    return score_matrix
